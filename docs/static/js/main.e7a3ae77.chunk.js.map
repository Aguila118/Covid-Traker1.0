{"version":3,"sources":["Images/spinner.gif","Components/Nav.js","Components/Estadis.js","Components/PaisesDeAmerica.js","Components/DatosMundo.js","helper/GetData.js","Components/Spinner.js","App.js","hooks/useFetchData.js","serviceWorker.js","index.js"],"names":["module","exports","Nav","setpais","pais","className","onMouseOver","Estadis","datos","tasaRecupero","Countries","TotalRecovered","TotalConfirmed","tasaMuertes","TotalDeaths","toFixed","PaisesDeAmerica","Country","NewConfirmed","DatosMundo","Global","GetData","a","fetch","resp","json","data","Spinner","src","spinner","style","width","margin","display","alt","App","useState","Loading","setdatos","useEffect","then","dat","useFetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e7a3ae77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.235b9b3e.gif\";","import React from 'react';\r\nimport './NavButtons.css';\r\n\r\nconst Nav = ({ setpais, pais }) => {\r\n\r\n\r\n  return (\r\n    <div>\r\n      <nav>\r\n        <div className=\"Titulo\">\r\n          <h1 className=\"Covid\">COVID-19 TRACKER</h1>\r\n          <h1 className=\"Sud\">Sudam√©rica</h1>\r\n        </div>\r\n        <ul className=\"nav-links\">\r\n          <li className=\"Links\" onMouseOver={() => { setpais(6) }}>Argentina</li>\r\n          <li className=\"Links\" onMouseOver={() => { setpais(20) }}>Bolivia</li>\r\n          <li className=\"Links\" onMouseOver={() => { setpais(178) }}>Uruguay</li>\r\n          <li className=\"Links\" onMouseOver={() => { setpais(34) }}>Chile</li>\r\n          <li className=\"Links\" onMouseOver={() => { setpais(130) }}>Paraguay</li>\r\n          <li className=\"Links\" onMouseOver={() => { setpais(23) }}>Brasil</li>\r\n        </ul>\r\n      </nav>\r\n    </div>\r\n  )\r\n\r\n}\r\nexport default Nav;\r\n\r\n","import React from 'react'\r\nimport './Estadis.css'\r\n\r\nexport const Estadis = ({ datos, pais }) => {\r\n\r\n\r\n  const tasaRecupero = (((datos.Countries[pais].TotalRecovered * 100) / datos.Countries[pais].TotalConfirmed));\r\n  const tasaMuertes = (((datos.Countries[pais].TotalDeaths * 100) / datos.Countries[pais].TotalConfirmed));\r\n\r\n\r\n  const estadisticos = () => {\r\n    return (\r\n      <>\r\n        <div className=\"wrapperTasas\">\r\n          <h5 className=\"TituloTasas\">Tasa Muertes:</h5>\r\n          <h5 className=\"numeromuerte\">{tasaMuertes.toFixed(2)}</h5>\r\n        </div>\r\n        <div className=\"wrapperTasas\">\r\n          <h5 className=\"TituloTasas\">Tasa Recuperados:</h5>\r\n          <h5 className=\"numeromuerte\">{tasaRecupero.toFixed(2)}</h5>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n\r\n\r\n  return (\r\n    <div className='Estadisticas'>\r\n      <h3>Estadisticas:</h3>\r\n      <div className=\"WrapperEstad\">\r\n        {estadisticos()}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport './PaisesDeAmerica.css'\r\nimport { Estadis } from './Estadis';\r\n\r\nconst PaisesDeAmerica = ({ pais, datos }) => {\r\n\r\n  return (\r\n    <>\r\n      <div className=\"DatosWrapper\">\r\n        <div className=\"pais\">\r\n          <h1>{datos.Countries[pais].Country}</h1><br />\r\n          <div className=\"items-casos\">\r\n            <h2>Nuevos Casos: </h2><h2 className=\"item-casos-nro\">{datos.Countries[pais].NewConfirmed}</h2>\r\n          </div>\r\n          <div className=\"items-casos\">\r\n            <h2>Total de Casos: </h2><h2 className=\"item-casos-nro\">{datos.Countries[pais].TotalConfirmed}</h2>\r\n          </div>\r\n          <div className=\"items-casos\">\r\n            <h2>Total Muertos: </h2><h2 className=\"item-casos-nro\">{datos.Countries[pais].TotalDeaths}</h2>\r\n          </div>\r\n          <div className=\"items-casos\">\r\n            <h2>En Recuperacion: </h2><h2 className=\"item-casos-nro\">{datos.Countries[pais].TotalConfirmed - datos.Countries[pais].TotalRecovered}</h2>\r\n          </div>\r\n          <div className=\"items-casos\">\r\n            <h2>Total Recuperados: </h2><h2 className=\"item-casos-nro\">{datos.Countries[pais].TotalRecovered}</h2>\r\n          </div>\r\n        </div>\r\n        <Estadis datos={datos} pais={pais} />\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default PaisesDeAmerica;","import React from 'react'\r\nimport './Datosmundo.css'\r\n\r\nexport const DatosMundo = ({ datos }) => {\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"mundo\">\r\n        <h1>Mundo</h1><br />\r\n        <h4>Nuevos Casos: {datos.Global.NewConfirmed}</h4>\r\n        <h4>Total Casos: {datos.Global.TotalConfirmed}</h4>\r\n        <h4>Total Muertos: {datos.Global.TotalDeaths}</h4>\r\n        <h4>Total Recuperados: {datos.Global.TotalRecovered}</h4>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","\r\nexport const GetData = async () => {\r\n\r\n  const url = \"https://api.covid19api.com/summary\";\r\n  const resp = await fetch(url)\r\n  const data = await resp.json()\r\n\r\n  return data;\r\n}\r\n\r\n","import React from \"react\";\r\nimport spinner from \"../Images/spinner.gif\";\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n  return (\r\n    <div className=\"spinner\">\r\n      <img src={spinner} style={{ width: \"200px\", margin: \"auto\", display: \"block\" }} alt=\"Cargando\" />\r\n      <p>Cargando...</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React, { useState } from 'react';\r\nimport Nav from './Components/Nav'\r\nimport PaisesDeAmerica from './Components/PaisesDeAmerica';\r\nimport { DatosMundo } from './Components/DatosMundo';\r\nimport { useFetchData } from './hooks/useFetchData'\r\nimport Spinner from './Components/Spinner'\r\n\r\n\r\nconst App = () => {\r\n\r\n  const { data: datos, Loading } = useFetchData();\r\n  const [pais, setpais] = useState(6)\r\n\r\n\r\n  return Loading ? (<Spinner />) :\r\n    (\r\n      <>\r\n        <Nav setpais={setpais} pais={pais} />\r\n        <DatosMundo datos={datos} />\r\n        <PaisesDeAmerica datos={datos} pais={pais} />\r\n      </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import { useState, useEffect } from \"react\";\r\nimport { GetData } from '../helper/GetData';\r\n\r\nexport const useFetchData = () => {\r\n  const [datos, setdatos] = useState({\r\n    data: [],\r\n    Loading: true\r\n  });\r\n\r\n  useEffect(() => {\r\n    GetData().then(dat => {\r\n      setdatos({\r\n        data: dat,\r\n        Loading: false\r\n      });\r\n    })\r\n\r\n  }, [])\r\n\r\n  return datos;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}